name: Package

on:
  push:
    tags:
      - v*.*.*

jobs:

  wheel-linux:
    runs-on: ubuntu-latest
    name: Build Linux wheels
    strategy:
      matrix:
        include:
        - python-version: 3.6
          pyo3-python: /opt/python/cp36-cp36m/bin/python
          manylinux-img: quay.io/pypa/manylinux_2_24_x86_64
        - python-version: 3.7
          pyo3-python: /opt/python/cp37-cp37m/bin/python
          manylinux-img: quay.io/pypa/manylinux_2_24_x86_64
        - python-version: 3.8
          pyo3-python: /opt/python/cp38-cp38/bin/python
          manylinux-img: quay.io/pypa/manylinux_2_24_x86_64
        - python-version: 3.9
          pyo3-python: /opt/python/cp39-cp39/bin/python
          manylinux-img: quay.io/pypa/manylinux_2_24_x86_64
        - python-version: '3.10'
          pyo3-python: /opt/python/cp310-cp310/bin/python
          manylinux-img: quay.io/pypa/manylinux_2_24_x86_64
        - python-version: pypy-3.6
          pyo3-python: /opt/pypy/pypy3.6-7.3.3/bin/python
          manylinux-img: pypywheels/manylinux2010-pypy_x86_64
        - python-version: pypy-3.7
          pyo3-python: /opt/pypy/pypy3.7-7.3.4/bin/python
          manylinux-img: pypywheels/manylinux2010-pypy_x86_64
        - python-version: pypy-3.8
          pyo3-python: /opt/pypy/pypy3.7-7.3.4/bin/python
          manylinux-img: pypywheels/manylinux2010-pypy_x86_64
        - python-version: pypy-3.9
          pyo3-python: /opt/pypy/pypy3.7-7.3.4/bin/python
          manylinux-img: pypywheels/manylinux2010-pypy_x86_64
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Build manylinux wheels
      uses: addnab/docker-run-action@v2
      with:
        image: ${{ matrix.manylinux-img }}
        options: -v ${{ github.workspace }}:/io -e TERM=$TERM
        shell: bash
        run: |
          ${{ matrix.pyo3-python }} -m pip install -U -r /io/.github/workflows/requirements.txt
          ${{ matrix.pyo3-python }} -m pip wheel --no-deps -vv /io -w /tmp
          for whl in /tmp/*.whl; do ${{ matrix.pyo3-python }} -m auditwheel repair $whl -w /io/dist; done
    - name: Store built wheels
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist/*

  test-linux:
    runs-on: ubuntu-latest
    name: Test Linux wheels
    needs:
    - wheel-linux
    strategy:
      matrix:
        python-version:
        - 3.6
        - 3.7
        - 3.8
        - 3.9
        - '3.10'
    steps:
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download built wheels
      uses: actions/download-artifact@v2
      with:
          name: dist
          path: dist
    - name: Update pip to latest version
      run: python -m pip install -U pip setuptools wheel
    - name: Install requirements
      run: python -m pip install psutil
    - name: Install built wheel
      run: python -m pip install --no-index --find-links=dist pymemesuite
    # - name: Run tests without coverage
    #   run: python -m unittest pymemesuite.tests -vv

  wheel-osx:
    runs-on: macos-latest
    name: Build OSX wheels
    strategy:
      matrix:
        python-version:
        - 3.6
        - 3.7
        - 3.8
        - 3.9
        - '3.10'
        - pypy-3.7
        - pypy-3.8
        - pypy-3.9
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Cache Python requirements
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache built C files
      uses: actions/cache@v2
      with:
        path: build
        key: ${{ runner.os }}-build-${{ hashFiles('Prodigal/*') }}
        restore-keys: |
          ${{ runner.os }}-build-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Python requirements
      run: python -m pip install -r .github/workflows/requirements.txt
    - name: Build wheel distribution
      run: python setup.py bdist_wheel
    - name: Store built wheels
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist/*

  test-osx:
    runs-on: macos-latest
    name: Test OSX wheels
    needs:
    - wheel-osx
    strategy:
      matrix:
        python-version:
        - 3.6
        - 3.7
        - 3.8
        - 3.9
        - '3.10'
        - pypy-3.7
        - pypy-3.8
        - pypy-3.9
    steps:
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download built wheels
      uses: actions/download-artifact@v2
      with:
          name: dist
          path: dist
    - name: Update pip to latest version
      run: python -m pip install -U pip setuptools wheel
    - name: Install requirements
      run: python -m pip install psutil
    - name: Install built wheel
      run: python -m pip install --no-index --find-links=dist pymemesuite
    # - name: Run tests without coverage
    #   run: python -m unittest pymemesuite.tests -vv

  sdist:
    runs-on: ubuntu-latest
    name: Build source distribution
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install build requirements
      run: python -m pip install -r .github/workflows/requirements.txt
    - name: Build wheel distribution
      run: python setup.py sdist
    - name: Store built wheels
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist/*

  upload:
    environment: PyPI
    runs-on: ubuntu-latest
    name: Upload
    needs:
    - sdist
    - wheel-linux
    - test-linux
    - wheel-osx
    - test-osx
    steps:
    - name: Download built distributions
      uses: actions/download-artifact@v2
      with:
          name: dist
          path: dist
    - name: Publish distributions to PyPI
      if: startsWith(github.ref, 'refs/tags/v')
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: false

  release:
    environment: GitHub Releases
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/v')"
    name: Release
    needs: upload
    steps:
    - name: Checkout code
      uses: actions/checkout@v1
    - name: Release a Changelog
      uses: rasmus-saks/release-a-changelog-action@v1.0.1
      with:
        github-token: '${{ secrets.GITHUB_TOKEN }}'

  # aur:
  #   environment: Arch Linux User Repository
  #   runs-on: ubuntu-latest
  #   name: Update AUR package
  #   needs:
  #   - sdist
  #   - upload
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2
  #     with:
  #       submodules: true
  #   - name: Set up Python 3.10
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: '3.10'
  #   - name: Download built wheels
  #     uses: actions/download-artifact@v2
  #     with:
  #         name: dist
  #         path: dist
  #   - name: Extract package version
  #     run: "echo PKGVER=$(python setup.py --version) >> $GITHUB_ENV"
  #   - name: Compute SHA256 of source distribution
  #     run: "echo SHA256=$(sha256sum dist/pymemesuite-${{ env.PKGVER }}.tar.gz | cut -f1 -d' ') >> $GITHUB_ENV"
  #   - name: Generate PKGBUILD
  #     run: 'sed -e "s/%pkgver/${{ env.PKGVER }}/g" -e "s/%sha256sum/${{ env.SHA256 }}/g" pkg/aur/PKGBUILD.in > pkg/aur/PKGBUILD'
  #   - name: Update package
  #     uses: KSXGitHub/github-actions-deploy-aur@v2.2.5
  #     with:
  #       pkgname: python-pymemesuite
  #       pkgbuild: pkg/aur/PKGBUILD
  #       commit_username: ${{ secrets.AUR_USER }}
  #       commit_email: ${{ secrets.AUR_EMAIL }}
  #       ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
  #       commit_message: ${{ github.event.head_commit.message }}
  #       ssh_keyscan_types: rsa,dsa,ecdsa,ed25519
