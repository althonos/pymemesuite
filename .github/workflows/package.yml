name: Package

on:
  push:
    tags:
      - v*

jobs:

  wheel-linux-aarch64:
    name: Build Linux wheels (Aarch64)
    runs-on: ubuntu-22.04-arm
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Build manylinux wheels
      uses: pypa/cibuildwheel@v2.19.1
      env:
        CIBW_ARCHS: aarch64
        CIBW_BUILD: '*-manylinux_aarch64'
        CIBW_BUILD_VERBOSITY: 2
      with:
        output-dir: dist
    - uses: actions/upload-artifact@v4
      with:
        name: wheels-manylinux_aarch64
        path: dist/*

  wheel-linux-x86_64:
    name: Build Linux wheels (x86-64)
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Build manylinux wheels
      uses: pypa/cibuildwheel@v2.19.1
      env:
        CIBW_ARCHS: x86_64
        CIBW_BUILD: '*-manylinux_x86_64'
        CIBW_BUILD_VERBOSITY: 2
      with:
        output-dir: dist
    - uses: actions/upload-artifact@v4
      with:
        name: wheels-manylinux_x86_64
        path: dist/*

  wheel-macos-x86_64:
    name: Build MacOS wheels (x86-64)
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Build manylinux wheels
      uses: pypa/cibuildwheel@v2.19.1
      env:
        CIBW_ARCHS: x86_64
        CIBW_BUILD: '*-macosx_x86_64'
        CIBW_BUILD_VERBOSITY: 2
      with:
        output-dir: dist
    - uses: actions/upload-artifact@v4
      with:
        name: wheels-macosx_x86_64
        path: dist/*

  wheel-macos-aarch64:
    name: Build MacOS wheels (Aarch64)
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Build manylinux wheels
      uses: pypa/cibuildwheel@v2.19.1
      env:
        CIBW_ARCHS: arm64
        CIBW_BUILD: '*-macosx_arm64'
        CIBW_BUILD_VERBOSITY: 2
      with:
        output-dir: dist
    - uses: actions/upload-artifact@v4
      with:
        name: wheels-macosx_arm64
        path: dist/*

  # wheel-win32-x86_64:
  #   name: Build Windows wheels (x86-64)
  #   runs-on: windows-2019
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       submodules: true
  #   - name: Build manylinux wheels
  #     uses: pypa/cibuildwheel@v2.19.1
  #     env:
  #       CIBW_ARCHS: AMD64
  #       CIBW_BUILD: ${{ matrix.python-tag }}
  #       CIBW_BEFORE_BUILD: pip install cython
  #       CIBW_BUILD_VERBOSITY: 2
  #       CIBW_TEST_COMMAND: python -m unittest discover -vv
  #       CIBW_TEST_REQUIRES: importlib-resources
  #     with:
  #       output-dir: dist
  #   - uses: actions/upload-artifact@v3
  #     with:
  #       name: wheels
  #       path: dist/*

  sdist:
    runs-on: ubuntu-latest
    name: Build source distribution
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Set up Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: 3.11
    - name: Install build requirements
      run: python -m pip install -r .github/workflows/requirements.txt
    - name: Build source distribution
      run: python setup.py sdist
    - name: Store built source distribution
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*

  test-sdist:
    runs-on: ubuntu-latest
    name: Test source distribution
    needs:
    - sdist
    steps:
    - name: Setup Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'
    - name: Download source distribution
      uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist/
    - name: Update pip to latest version
      run: python -m pip install -U pip setuptools wheel
    - name: Install source distribution
      run: python -m pip install --no-binary pymemesuite --find-links=dist pymemesuite
    - name: Run tests without coverage
      run: python -m unittest pymemesuite.tests -vv

  upload:
    environment: PyPI
    runs-on: ubuntu-latest
    name: Upload
    permissions:
      id-token: write
    needs:
    - sdist
    - test-sdist
    - wheel-linux-aarch64
    - wheel-linux-x86_64
    - wheel-macos-aarch64
    - wheel-macos-x86_64
    # - wheel-win32-x86_64
    steps:
    - name: Download source distribution
      uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist/
        merge-multiple: true
    - name: Download wheel distributions
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: dist/
        merge-multiple: true
    - uses: pypa/gh-action-pypi-publish@release/v1
      if: startsWith(github.ref, 'refs/tags')

  release:
    environment: GitHub Releases
    runs-on: ubuntu-latest
    if: "!contains(github.ref, 'rc')"
    name: Release
    needs: upload
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - uses: rasmus-saks/release-a-changelog-action@v1.0.1
      with:
        github-token: '${{ secrets.GITHUB_TOKEN }}'

  # aur:
  #   environment: Arch Linux User Repository
  #   runs-on: ubuntu-latest
  #   if: "!contains(github.ref, 'rc')"
  #   name: Update AUR package
  #   needs:
  #   - sdist
  #   - upload
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       submodules: true
  #   - name: Set up Python 3.10
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: '3.10'
  #   - name: Download built wheels
  #     uses: actions/download-artifact@v2
  #     with:
  #         name: wheels
  #         path: dist
  #   - name: Extract package version
  #     run: "echo PKGVER=$(python setup.py --version) >> $GITHUB_ENV"
  #   - name: Compute SHA256 of source distribution
  #     run: "echo SHA256=$(sha256sum dist/pymemesuite-${{ env.PKGVER }}.tar.gz | cut -f1 -d' ') >> $GITHUB_ENV"
  #   - name: Generate PKGBUILD
  #     run: 'sed -e "s/%pkgver/${{ env.PKGVER }}/g" -e "s/%sha256sum/${{ env.SHA256 }}/g" pkg/aur/PKGBUILD.in > pkg/aur/PKGBUILD'
  #   - name: Update package
  #     uses: KSXGitHub/github-actions-deploy-aur@v2.7.2
  #     with:
  #       pkgname: python-pymemesuite
  #       pkgbuild: pkg/aur/PKGBUILD
  #       commit_username: ${{ secrets.AUR_USER }}
  #       commit_email: ${{ secrets.AUR_EMAIL }}
  #       ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
  #       commit_message: ${{ github.event.head_commit.message }}
